{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","rows","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","background","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.9f535165.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav\r\n        className={`navbar navbar-expand-lg  navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n               {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n             </Link>*/}\r\n              </li>\r\n             {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.aboutText}\r\n                </Link>\r\n            </li>*/}\r\n            </ul>\r\n            <form className=\"d-flex\" role=\"search\">\r\n              {/*\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-info\" type=\"submit\">\r\n                Search\r\n              </button>*/}\r\n              <div\r\n                className={`form-check form-switch text-${\r\n                  props.mode === \"light\" ? \"dark\" : \"light\"\r\n                }`}\r\n              >\r\n                <input\r\n                  className=\"form-check-input\"\r\n                  type=\"checkbox\"\r\n                  //role=\"switch\"\r\n                  id=\"flexSwitchCheckDefault\"\r\n                  onClick={props.toggleMode}\r\n                />\r\n                <label\r\n                  className=\"form-check-label\"\r\n                  htmlFor=\"flexSwitchCheckDefault\"\r\n                >\r\n                  {\" \"}\r\n                  Enable Dark Mode\r\n                </label>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n     aboutText: PropTypes.string.isRequired\r\n\r\n}\r\nNavbar.defaultProps ={\r\ntitle: 'set Title here ',\r\n     aboutText:  'About '\r\n}","import React, {useState} from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n  const handleUpClick = ()=>{\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\" Converted to UpperCase!\" , \"success\");\r\n    }\r\n\r\n  const handleLoClick = ()=>{\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\" Converted to LowerCase!\", \"success\");\r\n     }\r\n\r\n  const handleClearClick = ()=>{\r\n    let newText = ' ';\r\n    setText(newText);\r\n     props.showAlert(\" Text Cleared!\", \"success\");\r\n     }\r\n\r\n\r\n      const handleOnChange = (event)=>{\r\n    // console.log(\"On Changed \");\r\n    setText(event.target.value);\r\n     }\r\n     const handleCopy = ()=>{\r\n      var text = document.getElementById('myBox')\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n       props.showAlert(\" Copied to Clipboard!\", \"success\");\r\n     }\r\n   const handleExtraSpaces = () =>{\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n     props.showAlert(\" Extra Spaces Removed!\", \"success\");\r\n\r\n   }  \r\n\r\n  const [text , setText] = useState('');\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1>{props.heading} </h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>\r\n          Convert to UpperCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>\r\n          Convert to LowerCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>\r\n          Remove Extra Spaces\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h2> Your Text Summary </h2>\r\n        <p>\r\n          {\" \"}\r\n          {text.split(\" \").length} Words and {text.length} Characters\r\n        </p>\r\n        <p> {0.008 * text.split(\" \").length} Minutes to read</p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {\" \"}\r\n          {text.length > 0 ? text : \" Enter Something to preview it here\"}{\" \"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    \r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n\r\n    }\r\n\r\n\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong> { capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        \r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert\r\n\r\n","\nimport './App.css';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React ,{useState} from 'react';\n//import ReactDOM from \"react-dom/client\";\n//import { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\n\n\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\");//wether dark mode is enabled or not\n  \n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message , type) =>{\n    setAlert(\n      {\n        msg:message ,\n        type:type\n      }\n    )\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n\n\n\n  }\n\n  const toggleMode =() => {\n    if(mode === 'light'){\n     setMode('dark') ;\n     document.body.style.background = '#042743';\n     showAlert(\"Dark Mode has Been Enabled\" , \"success\");\n    }\n    else{\n     setMode(\"light\"); \n     document.body.style.background = \"white\";\n     showAlert(\"Light Mode has Been Enabled\", \"success\");\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {/*<BrowserRouter>*/}\n        <Navbar\n          title=\"TextUtils\"\n          aboutText=\"About TextUtils\"\n          mode={mode}\n          toggleMode={toggleMode}\n        />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/*<Routes>\n            <Route\n               exact path=\"/\"\n          element={*/}\n                <TextForm\n                  heading=\"Enter the Text to Analyze\"\n                  mode={mode}\n                  showAlert={showAlert}\n                />\n             {/* }\n            ></Route>\n            <Route  exact path=\"/about\" element={<About />}></Route>\n        </Routes>*/}\n          \n        </div>\n     { /*</BrowserRouter>*/}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}